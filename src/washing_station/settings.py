"""
Django settings for washing_station project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%s*ile53g22nwbyoj%0+32l=sfy+*@t=0w**7q)*sw0z9f9pu_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'authentication_app',
    'customers',
    'vehicles',
    'services',
    'employees',
    'bookings',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'washing_station.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "washing_station/templates"], 
        #Configuration du repertoire Template de mon projet
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # Ajoute des infos de debug utiles quand DEBUG = True.
                'django.template.context_processors.request', # Ajoute l’objet request dans tous les templates → très pratique pour vérifier l’utilisateur, l’URL, etc.
                'django.contrib.auth.context_processors.auth', # Ajoute user (utilisateur connecté) et perms (permissions) → utile pour afficher "Bienvenue {{ user.username }}" dans un template.
                'django.contrib.messages.context_processors.messages', # Ajoute les messages flash (comme "Votre compte a été créé avec succès").
            ],
        },
    },
]

WSGI_APPLICATION = 'washing_station.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'washing_station_provisoire',
        'USER': 'washing_station_admin',
        'PASSWORD': 'washing_station_admin@123{}',
        'HOST': 'localhost',
        'PORT': '5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# -----------------------A ignorer -----------------------

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# Empêche les mots de passe trop similaires au nom d’utilisateur (UserAttributeSimilarityValidator)

# Vérifie une longueur minimale (par défaut 8)

# Rejette les mots de passe trop communs (password123, etc.)

# Rejette les mots de passe entièrement numériques (12345678)
# -------------------------------------


# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#         'OPTIONS': {
#             'min_length': 8,
#         }
#     },
#     {
#         'NAME': 'authentication.validators.ContainsLetterValidator',
#     },
#     {
#         'NAME': 'authentication.validators.ContainsNumberValidator',
#     },
# ]
# Définit explicitement une longueur minimale de 8 caractères

# Utilise deux validateurs personnalisés par moi même:

# ContainsLetterValidator : le mot de passe doit contenir au moins une lettre

# ContainsNumberValidator : le mot de passe doit contenir au moins un chiffre



# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "washing_station/static")
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'mediafiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' #tilise un champ auto-incrémenté 64 bits par défaut pour les clés primaires. 


# AUTH_USER_MODEL = 'authentication.User' #utiliser un modèle utilisateur personnalisé 

LOGIN_URL = 'login' # redirige vers la page nommée login si l’utilisateur n’est pas connecté.
LOGIN_REDIRECT_URL = 'home' #Après connexion, redirige vers home.

LOGOUT_REDIRECT_URL = LOGIN_URL #Après déconnexion, redirige vers login.



